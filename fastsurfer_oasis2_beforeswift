{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2939c9cc-4960-4a3d-8740-4f37b137aac1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#fastsurfer_oasis2_beforeswift.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "56fc436a-330c-406e-b7c6-8530c261cf9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pickle\n",
    "import argparse\n",
    "import os\n",
    "import glob\n",
    "import pydicom\n",
    "import sys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "19c36201-7163-424f-84f1-2ef4d80779ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nibabel as nib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import glob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "cd7ad5f3-5472-46e3-96d7-8af4240a9bb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_roi_dict = {\n",
    "    'Left-Cingulate': {\n",
    "        'ctx-lh-caudalanteriorcingulate',\n",
    "        'ctx-lh-rostralanteriorcingulate',\n",
    "        'ctx-lh-isthmuscingulate',\n",
    "        'ctx-lh-posteriorcingulate',\n",
    "    },\n",
    "    'Right-Cingulate': {\n",
    "        'ctx-rh-caudalanteriorcingulate',\n",
    "        'ctx-rh-rostralanteriorcingulate',\n",
    "        'ctx-rh-isthmuscingulate',\n",
    "        'ctx-rh-posteriorcingulate',\n",
    "    },\n",
    "    'Left-Frontal': {\n",
    "        'ctx-lh-caudalmiddlefrontal',\n",
    "        'ctx-lh-lateralorbitofrontal',\n",
    "        'ctx-lh-medialorbitofrontal',\n",
    "        'ctx-lh-parsopercularis',\n",
    "        'ctx-lh-parsorbitalis',\n",
    "        'ctx-lh-parstriangularis',\n",
    "        'ctx-lh-precentral',\n",
    "        'ctx-lh-rostralmiddlefrontal',\n",
    "        'ctx-lh-superiorfrontal',\n",
    "        'ctx-lh-paracentral'\n",
    "    },\n",
    "    'Right-Frontal': {\n",
    "        'ctx-rh-caudalmiddlefrontal',\n",
    "        'ctx-rh-lateralorbitofrontal',\n",
    "        'ctx-rh-medialorbitofrontal',\n",
    "        'ctx-rh-parsopercularis',\n",
    "        'ctx-rh-parsorbitalis',\n",
    "        'ctx-rh-parstriangularis',\n",
    "        'ctx-rh-precentral',\n",
    "        'ctx-rh-rostralmiddlefrontal',\n",
    "        'ctx-rh-superiorfrontal',\n",
    "        'ctx-rh-paracentral'\n",
    "    },\n",
    "    'Left-Temporal': {\n",
    "        'ctx-lh-entorhinal',\n",
    "        'ctx-lh-fusiform',\n",
    "        'ctx-lh-inferiortemporal',\n",
    "        'ctx-lh-middletemporal',\n",
    "        'ctx-lh-superiortemporal',\n",
    "        'ctx-lh-transversetemporal',\n",
    "        'ctx-lh-parahippocampal',\n",
    "        'Left-Hippocampus',\n",
    "        'Left-Amygdala',\n",
    "    },\n",
    "    'Right-Temporal': {\n",
    "        'ctx-rh-entorhinal',\n",
    "        'ctx-rh-fusiform',\n",
    "        'ctx-rh-inferiortemporal',\n",
    "        'ctx-rh-middletemporal',\n",
    "        'ctx-rh-superiortemporal',\n",
    "        'ctx-rh-transversetemporal',\n",
    "        'ctx-rh-parahippocampal',\n",
    "        'Right-Hippocampus',\n",
    "        'Right-Amygdala',\n",
    "    },\n",
    "    'Left-Parietal': {\n",
    "        'ctx-lh-inferiorparietal',\n",
    "        'ctx-lh-postcentral',\n",
    "        'ctx-lh-superiorparietal',\n",
    "        'ctx-lh-supramarginal',\n",
    "        'ctx-lh-precuneus'\n",
    "    },\n",
    "    'Right-Parietal': {\n",
    "        'ctx-rh-inferiorparietal',\n",
    "        'ctx-rh-postcentral',\n",
    "        'ctx-rh-superiorparietal',\n",
    "        'ctx-rh-supramarginal',\n",
    "        'ctx-rh-precuneus'\n",
    "    },\n",
    "    'Left-Occipital': {\n",
    "        'ctx-lh-cuneus',\n",
    "        'ctx-lh-lateraloccipital',\n",
    "        'ctx-lh-lingual',\n",
    "        'ctx-lh-pericalcarine'\n",
    "    },\n",
    "    'Right-Occipital': {\n",
    "        'ctx-rh-cuneus',\n",
    "        'ctx-rh-lateraloccipital',\n",
    "        'ctx-rh-lingual',\n",
    "        'ctx-rh-pericalcarine'\n",
    "    },\n",
    "    'Left-Insula':{\n",
    "        'ctx-lh-insula'\n",
    "    },\n",
    "    'Right-Insula': {\n",
    "        'ctx-rh-insula'\n",
    "    },\n",
    "    'Left-Cerebellum':{\n",
    "        'Left-Cerebellum-White-Matter',\n",
    "        'Left-Cerebellum-Cortex'\n",
    "    },\n",
    "    'Right-Cerebellum': {\n",
    "        'Right-Cerebellum-White-Matter',\n",
    "        'Right-Cerebellum-Cortex'\n",
    "    },\n",
    "    'Left-Combined-Cerebral-WM': {\n",
    "        'Left-Cerebral-White-Matter',\n",
    "        'Left-WM-hypointensities'\n",
    "    },\n",
    "    'Right-Combined-Cerebral-WM': {\n",
    "        'Right-Cerebral-White-Matter',\n",
    "        'Right-WM-hypointensities'\n",
    "    },\n",
    "    'Left-Total-Lateral-Ventricle': {\n",
    "        'Left-Lateral-Ventricle',\n",
    "        'Left-Inf-Lat-Vent'\n",
    "    },\n",
    "    'Right-Total-Lateral-Ventricle': {\n",
    "        'Right-Lateral-Ventricle',\n",
    "        'Right-Inf-Lat-Vent'\n",
    "    },\n",
    "}\n",
    "gray_matter_index = {\n",
    "    'left_cortical_gm': {\n",
    "        'left_cingulate',\n",
    "        'left_frontal',\n",
    "        'left_temporal',\n",
    "        'left_parietal',\n",
    "        'left_occipital',\n",
    "        'left_insula'\n",
    "    },\n",
    "    'right_cortical_gm': {\n",
    "        'right_cingulate',\n",
    "        'right_frontal',\n",
    "        'right_temporal',\n",
    "        'right_parietal',\n",
    "        'right_occipital',\n",
    "        'right_insula'\n",
    "    }\n",
    "}\n",
    "\n",
    "combined_roi_display_dict = {\n",
    "    'Left-Cingulate': {\n",
    "        'ctx-lh-caudalanteriorcingulate',\n",
    "        'ctx-lh-rostralanteriorcingulate',\n",
    "        'ctx-lh-isthmuscingulate',\n",
    "        'ctx-lh-posteriorcingulate',\n",
    "    },\n",
    "    'Right-Cingulate': {\n",
    "        'ctx-rh-caudalanteriorcingulate',\n",
    "        'ctx-rh-rostralanteriorcingulate',\n",
    "        'ctx-rh-isthmuscingulate',\n",
    "        'ctx-rh-posteriorcingulate',\n",
    "    },\n",
    "    'Left-Frontal': {\n",
    "        'ctx-lh-caudalmiddlefrontal',\n",
    "        'ctx-lh-lateralorbitofrontal',\n",
    "        'ctx-lh-medialorbitofrontal',\n",
    "        'ctx-lh-parsopercularis',\n",
    "        'ctx-lh-parsorbitalis',\n",
    "        'ctx-lh-parstriangularis',\n",
    "        'ctx-lh-precentral',\n",
    "        'ctx-lh-rostralmiddlefrontal',\n",
    "        'ctx-lh-superiorfrontal',\n",
    "        'ctx-lh-paracentral'\n",
    "    },\n",
    "    'Right-Frontal': {\n",
    "        'ctx-rh-caudalmiddlefrontal',\n",
    "        'ctx-rh-lateralorbitofrontal',\n",
    "        'ctx-rh-medialorbitofrontal',\n",
    "        'ctx-rh-parsopercularis',\n",
    "        'ctx-rh-parsorbitalis',\n",
    "        'ctx-rh-parstriangularis',\n",
    "        'ctx-rh-precentral',\n",
    "        'ctx-rh-rostralmiddlefrontal',\n",
    "        'ctx-rh-superiorfrontal',\n",
    "        'ctx-rh-paracentral'\n",
    "    },\n",
    "    'Left-Temporal': {\n",
    "        'ctx-lh-entorhinal',\n",
    "        'ctx-lh-fusiform',\n",
    "        'ctx-lh-inferiortemporal',\n",
    "        'ctx-lh-middletemporal',\n",
    "        'ctx-lh-superiortemporal',\n",
    "        'ctx-lh-transversetemporal',\n",
    "        'ctx-lh-parahippocampal',\n",
    "    },\n",
    "    'Right-Temporal': {\n",
    "        'ctx-rh-entorhinal',\n",
    "        'ctx-rh-fusiform',\n",
    "        'ctx-rh-inferiortemporal',\n",
    "        'ctx-rh-middletemporal',\n",
    "        'ctx-rh-superiortemporal',\n",
    "        'ctx-rh-transversetemporal',\n",
    "        'ctx-rh-parahippocampal',\n",
    "    },\n",
    "    'Left-Parietal': {\n",
    "        'ctx-lh-inferiorparietal',\n",
    "        'ctx-lh-postcentral',\n",
    "        'ctx-lh-superiorparietal',\n",
    "        'ctx-lh-supramarginal',\n",
    "        'ctx-lh-precuneus'\n",
    "    },\n",
    "    'Right-Parietal': {\n",
    "        'ctx-rh-inferiorparietal',\n",
    "        'ctx-rh-postcentral',\n",
    "        'ctx-rh-superiorparietal',\n",
    "        'ctx-rh-supramarginal',\n",
    "        'ctx-rh-precuneus'\n",
    "    },\n",
    "    'Left-Occipital': {\n",
    "        'ctx-lh-cuneus',\n",
    "        'ctx-lh-lateraloccipital',\n",
    "        'ctx-lh-lingual',\n",
    "        'ctx-lh-pericalcarine'\n",
    "    },\n",
    "    'Right-Occipital': {\n",
    "        'ctx-rh-cuneus',\n",
    "        'ctx-rh-lateraloccipital',\n",
    "        'ctx-rh-lingual',\n",
    "        'ctx-rh-pericalcarine'\n",
    "    },\n",
    "    'Left-Insula':{\n",
    "        'ctx-lh-insula'\n",
    "    },\n",
    "    'Right-Insula': {\n",
    "        'ctx-rh-insula'\n",
    "    },\n",
    "    'Left-Cerebellum':{\n",
    "        'Left-Cerebellum-White-Matter',\n",
    "        'Left-Cerebellum-Cortex'\n",
    "    },\n",
    "    'Right-Cerebellum': {\n",
    "        'Right-Cerebellum-White-Matter',\n",
    "        'Right-Cerebellum-Cortex'\n",
    "    },\n",
    "    'Left-Combined-Cerebral-WM': {\n",
    "        'Left-Cerebral-White-Matter',\n",
    "        'Left-WM-hypointensities'\n",
    "    },\n",
    "    'Right-Combined-Cerebral-WM': {\n",
    "        'Right-Cerebral-White-Matter',\n",
    "        'Right-WM-hypointensities'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0e509c46-ffd2-4e45-8587-75e97eafbc49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 경로만 지정!\n",
    "#base_dir = '/mnt/drwelly1/Team_Planning/Brain_Volumetry/OASIS1_after_swift_20240403'\n",
    "base_dir = '/home/limseoyoung/drwelly1/Team_Planning/Brain_Volumetry/OASIS2_before_swift'\n",
    "\n",
    "\n",
    "def calculate_volume(nii_path):\n",
    "    img = nib.load(nii_path) \n",
    "    data = img.get_fdata()\n",
    "    header = img.header\n",
    "    voxel_volume = np.prod(header.get_zooms())\n",
    "    unique_elements, counts_elements = np.unique(data, return_counts=True)\n",
    "    volumes = counts_elements * voxel_volume\n",
    "    return dict(zip(unique_elements.astype(int), volumes))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "66a78ac7-c831-458a-9d69-89516a1837ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File not found, skipped: /home/limseoyoung/drwelly1/Team_Planning/Brain_Volumetry/OASIS2_before_swift/OAS2_0001_MR1_mpr-2_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/OAS2_0001_MR1_mpr-2_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/mri/aparc.DKTatlas+aseg.deep.nii.gz\n",
      "File not found, skipped: /home/limseoyoung/drwelly1/Team_Planning/Brain_Volumetry/OASIS2_before_swift/OAS2_0001_MR1_mpr-3_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/OAS2_0001_MR1_mpr-3_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/mri/aparc.DKTatlas+aseg.deep.nii.gz\n",
      "File not found, skipped: /home/limseoyoung/drwelly1/Team_Planning/Brain_Volumetry/OASIS2_before_swift/OAS2_0001_MR1_mpr-1_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/OAS2_0001_MR1_mpr-1_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/mri/aparc.DKTatlas+aseg.deep.nii.gz\n",
      "File not found, skipped: /home/limseoyoung/drwelly1/Team_Planning/Brain_Volumetry/OASIS2_before_swift/OAS2_0001_MR2_mpr-1_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/OAS2_0001_MR2_mpr-1_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222/mri/aparc.DKTatlas+aseg.deep.nii.gz\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "\n",
    "volume_data = []\n",
    "\n",
    "for subject_dir in os.listdir(base_dir):\n",
    "    full_subject_dir = os.path.join(base_dir, subject_dir)\n",
    "    if not os.path.isdir(full_subject_dir) or 'FS222' not in subject_dir:\n",
    "        continue\n",
    "    \n",
    "    double_subject_dir = os.path.join(full_subject_dir, subject_dir)\n",
    "    if not os.path.isdir(double_subject_dir):\n",
    "        continue\n",
    "    \n",
    "    mri_dir = os.path.join(double_subject_dir, 'mri')\n",
    "    nii_path = os.path.join(mri_dir, 'aparc.DKTatlas+aseg.deep.nii.gz')\n",
    "    \n",
    "    if os.path.isfile(nii_path):\n",
    "        try:\n",
    "            vol_data = calculate_volume(nii_path)\n",
    "            vol_data[\"subject\"] = subject_dir\n",
    "            volume_data.append(vol_data)\n",
    "        except OSError as e:\n",
    "            print(f\"Error processing file {nii_path}, skipped  Error: {e}\")\n",
    "    else:\n",
    "        print(f\"File not found, skipped: {nii_path}\")\n",
    "\n",
    "volume_df = pd.DataFrame(volume_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9317c649-438e-4a93-ac22-b4625f77f9ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df['subject'] = volume_df['subject'].str.replace('_Tag_pr100_sr100_ppf100_spf100_ipf100_sipf179_FS222', '')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c478ab76-cb3c-4a78-a35a-41f9fa260a4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>2</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>...</th>\n",
       "      <th>2025</th>\n",
       "      <th>2026</th>\n",
       "      <th>2027</th>\n",
       "      <th>2028</th>\n",
       "      <th>2029</th>\n",
       "      <th>2030</th>\n",
       "      <th>2031</th>\n",
       "      <th>2034</th>\n",
       "      <th>2035</th>\n",
       "      <th>subject</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.580499e+07</td>\n",
       "      <td>181132.123230</td>\n",
       "      <td>19219.318706</td>\n",
       "      <td>818.397987</td>\n",
       "      <td>9247.965859</td>\n",
       "      <td>44702.160316</td>\n",
       "      <td>6976.619893</td>\n",
       "      <td>4925.822925</td>\n",
       "      <td>4902.841925</td>\n",
       "      <td>1758.560973</td>\n",
       "      <td>...</td>\n",
       "      <td>9036.677862</td>\n",
       "      <td>1751.700973</td>\n",
       "      <td>9157.413860</td>\n",
       "      <td>21317.792674</td>\n",
       "      <td>9550.834854</td>\n",
       "      <td>14567.209777</td>\n",
       "      <td>8443.973871</td>\n",
       "      <td>875.678987</td>\n",
       "      <td>5572.034915</td>\n",
       "      <td>OAS2_0076_MR3_mpr-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.586738e+07</td>\n",
       "      <td>184989.844171</td>\n",
       "      <td>11396.517826</td>\n",
       "      <td>531.649992</td>\n",
       "      <td>9426.668856</td>\n",
       "      <td>40402.312382</td>\n",
       "      <td>6036.799908</td>\n",
       "      <td>3095.917953</td>\n",
       "      <td>4003.838939</td>\n",
       "      <td>1640.225975</td>\n",
       "      <td>...</td>\n",
       "      <td>7632.778883</td>\n",
       "      <td>1655.317975</td>\n",
       "      <td>7293.208888</td>\n",
       "      <td>22810.528651</td>\n",
       "      <td>9443.818856</td>\n",
       "      <td>13275.128797</td>\n",
       "      <td>8768.108866</td>\n",
       "      <td>964.858985</td>\n",
       "      <td>5343.253918</td>\n",
       "      <td>OAS2_0060_MR2_mpr-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.562939e+07</td>\n",
       "      <td>224489.037567</td>\n",
       "      <td>31969.314511</td>\n",
       "      <td>916.152986</td>\n",
       "      <td>9808.770850</td>\n",
       "      <td>46701.850286</td>\n",
       "      <td>7754.200881</td>\n",
       "      <td>4432.588932</td>\n",
       "      <td>5188.217921</td>\n",
       "      <td>2002.776969</td>\n",
       "      <td>...</td>\n",
       "      <td>11386.570826</td>\n",
       "      <td>2400.656963</td>\n",
       "      <td>12104.812815</td>\n",
       "      <td>26663.790592</td>\n",
       "      <td>10970.854832</td>\n",
       "      <td>13378.714795</td>\n",
       "      <td>10293.772843</td>\n",
       "      <td>855.784987</td>\n",
       "      <td>7072.316892</td>\n",
       "      <td>OAS2_0161_MR1_mpr-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.581666e+07</td>\n",
       "      <td>197907.566974</td>\n",
       "      <td>9654.077852</td>\n",
       "      <td>618.771991</td>\n",
       "      <td>11685.323821</td>\n",
       "      <td>45101.069310</td>\n",
       "      <td>7010.233893</td>\n",
       "      <td>3447.835947</td>\n",
       "      <td>4958.064924</td>\n",
       "      <td>2042.564969</td>\n",
       "      <td>...</td>\n",
       "      <td>8825.732865</td>\n",
       "      <td>1895.760971</td>\n",
       "      <td>9567.298854</td>\n",
       "      <td>21168.930676</td>\n",
       "      <td>9614.975853</td>\n",
       "      <td>11928.853818</td>\n",
       "      <td>8468.669870</td>\n",
       "      <td>825.257987</td>\n",
       "      <td>4919.648925</td>\n",
       "      <td>OAS2_0079_MR1_mpr-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.601540e+07</td>\n",
       "      <td>127230.017054</td>\n",
       "      <td>13441.140794</td>\n",
       "      <td>484.658993</td>\n",
       "      <td>9494.582855</td>\n",
       "      <td>37686.438424</td>\n",
       "      <td>5980.547909</td>\n",
       "      <td>3617.277945</td>\n",
       "      <td>4388.341933</td>\n",
       "      <td>1639.539975</td>\n",
       "      <td>...</td>\n",
       "      <td>6752.983897</td>\n",
       "      <td>1971.563970</td>\n",
       "      <td>8429.910871</td>\n",
       "      <td>21003.947679</td>\n",
       "      <td>7838.578880</td>\n",
       "      <td>10647.405837</td>\n",
       "      <td>6519.057900</td>\n",
       "      <td>699.033989</td>\n",
       "      <td>5074.341922</td>\n",
       "      <td>OAS2_0004_MR2_mpr-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1358</th>\n",
       "      <td>1.576702e+07</td>\n",
       "      <td>191293.498075</td>\n",
       "      <td>13957.012787</td>\n",
       "      <td>955.254985</td>\n",
       "      <td>13019.936801</td>\n",
       "      <td>58363.164108</td>\n",
       "      <td>7576.526884</td>\n",
       "      <td>3008.452954</td>\n",
       "      <td>4159.560936</td>\n",
       "      <td>1988.027970</td>\n",
       "      <td>...</td>\n",
       "      <td>9008.894862</td>\n",
       "      <td>2086.811968</td>\n",
       "      <td>7954.512878</td>\n",
       "      <td>24832.856620</td>\n",
       "      <td>9137.519860</td>\n",
       "      <td>14187.508783</td>\n",
       "      <td>10135.649845</td>\n",
       "      <td>976.177985</td>\n",
       "      <td>5900.285910</td>\n",
       "      <td>OAS2_0028_MR1_mpr-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1359</th>\n",
       "      <td>1.573744e+07</td>\n",
       "      <td>212184.255755</td>\n",
       "      <td>10576.747838</td>\n",
       "      <td>529.248992</td>\n",
       "      <td>10626.482837</td>\n",
       "      <td>50394.588229</td>\n",
       "      <td>7235.927889</td>\n",
       "      <td>3598.412945</td>\n",
       "      <td>5329.190919</td>\n",
       "      <td>2034.675969</td>\n",
       "      <td>...</td>\n",
       "      <td>9138.548860</td>\n",
       "      <td>2161.242967</td>\n",
       "      <td>9584.448853</td>\n",
       "      <td>25093.193616</td>\n",
       "      <td>8504.684870</td>\n",
       "      <td>14272.229782</td>\n",
       "      <td>7349.803888</td>\n",
       "      <td>789.928988</td>\n",
       "      <td>5300.378919</td>\n",
       "      <td>OAS2_0137_MR1_mpr-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1360</th>\n",
       "      <td>1.592019e+07</td>\n",
       "      <td>162941.804508</td>\n",
       "      <td>16876.628742</td>\n",
       "      <td>1245.089981</td>\n",
       "      <td>8806.524865</td>\n",
       "      <td>39245.716400</td>\n",
       "      <td>5990.837908</td>\n",
       "      <td>2674.370959</td>\n",
       "      <td>3522.609946</td>\n",
       "      <td>1305.114980</td>\n",
       "      <td>...</td>\n",
       "      <td>8457.007871</td>\n",
       "      <td>1470.097978</td>\n",
       "      <td>7743.224882</td>\n",
       "      <td>24026.120633</td>\n",
       "      <td>8396.296872</td>\n",
       "      <td>11457.571825</td>\n",
       "      <td>8403.842871</td>\n",
       "      <td>797.131988</td>\n",
       "      <td>5437.921917</td>\n",
       "      <td>OAS2_0026_MR1_mpr-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1361</th>\n",
       "      <td>1.576074e+07</td>\n",
       "      <td>204430.740874</td>\n",
       "      <td>20471.268687</td>\n",
       "      <td>826.286987</td>\n",
       "      <td>10300.632842</td>\n",
       "      <td>43187.472340</td>\n",
       "      <td>6902.188894</td>\n",
       "      <td>3572.001945</td>\n",
       "      <td>3992.519939</td>\n",
       "      <td>1593.577976</td>\n",
       "      <td>...</td>\n",
       "      <td>8085.881876</td>\n",
       "      <td>2228.470966</td>\n",
       "      <td>8710.141867</td>\n",
       "      <td>27222.194584</td>\n",
       "      <td>9346.749857</td>\n",
       "      <td>13241.857798</td>\n",
       "      <td>7926.043879</td>\n",
       "      <td>807.078988</td>\n",
       "      <td>6228.536905</td>\n",
       "      <td>OAS2_0100_MR2_mpr-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1362</th>\n",
       "      <td>1.577421e+07</td>\n",
       "      <td>171240.346381</td>\n",
       "      <td>30313.653536</td>\n",
       "      <td>2205.146966</td>\n",
       "      <td>9921.617848</td>\n",
       "      <td>53488.448182</td>\n",
       "      <td>6917.966894</td>\n",
       "      <td>4295.045934</td>\n",
       "      <td>4716.249928</td>\n",
       "      <td>1935.205970</td>\n",
       "      <td>...</td>\n",
       "      <td>9047.653862</td>\n",
       "      <td>1912.910971</td>\n",
       "      <td>8846.998865</td>\n",
       "      <td>22632.511654</td>\n",
       "      <td>10732.812836</td>\n",
       "      <td>11668.173822</td>\n",
       "      <td>8133.215876</td>\n",
       "      <td>550.171992</td>\n",
       "      <td>5645.779914</td>\n",
       "      <td>OAS2_0005_MR2_mpr-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1363 rows × 97 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0              2             4            5             7  \\\n",
       "0     1.580499e+07  181132.123230  19219.318706   818.397987   9247.965859   \n",
       "1     1.586738e+07  184989.844171  11396.517826   531.649992   9426.668856   \n",
       "2     1.562939e+07  224489.037567  31969.314511   916.152986   9808.770850   \n",
       "3     1.581666e+07  197907.566974   9654.077852   618.771991  11685.323821   \n",
       "4     1.601540e+07  127230.017054  13441.140794   484.658993   9494.582855   \n",
       "...            ...            ...           ...          ...           ...   \n",
       "1358  1.576702e+07  191293.498075  13957.012787   955.254985  13019.936801   \n",
       "1359  1.573744e+07  212184.255755  10576.747838   529.248992  10626.482837   \n",
       "1360  1.592019e+07  162941.804508  16876.628742  1245.089981   8806.524865   \n",
       "1361  1.576074e+07  204430.740874  20471.268687   826.286987  10300.632842   \n",
       "1362  1.577421e+07  171240.346381  30313.653536  2205.146966   9921.617848   \n",
       "\n",
       "                 8           10           11           12           13  ...  \\\n",
       "0     44702.160316  6976.619893  4925.822925  4902.841925  1758.560973  ...   \n",
       "1     40402.312382  6036.799908  3095.917953  4003.838939  1640.225975  ...   \n",
       "2     46701.850286  7754.200881  4432.588932  5188.217921  2002.776969  ...   \n",
       "3     45101.069310  7010.233893  3447.835947  4958.064924  2042.564969  ...   \n",
       "4     37686.438424  5980.547909  3617.277945  4388.341933  1639.539975  ...   \n",
       "...            ...          ...          ...          ...          ...  ...   \n",
       "1358  58363.164108  7576.526884  3008.452954  4159.560936  1988.027970  ...   \n",
       "1359  50394.588229  7235.927889  3598.412945  5329.190919  2034.675969  ...   \n",
       "1360  39245.716400  5990.837908  2674.370959  3522.609946  1305.114980  ...   \n",
       "1361  43187.472340  6902.188894  3572.001945  3992.519939  1593.577976  ...   \n",
       "1362  53488.448182  6917.966894  4295.045934  4716.249928  1935.205970  ...   \n",
       "\n",
       "              2025         2026          2027          2028          2029  \\\n",
       "0      9036.677862  1751.700973   9157.413860  21317.792674   9550.834854   \n",
       "1      7632.778883  1655.317975   7293.208888  22810.528651   9443.818856   \n",
       "2     11386.570826  2400.656963  12104.812815  26663.790592  10970.854832   \n",
       "3      8825.732865  1895.760971   9567.298854  21168.930676   9614.975853   \n",
       "4      6752.983897  1971.563970   8429.910871  21003.947679   7838.578880   \n",
       "...            ...          ...           ...           ...           ...   \n",
       "1358   9008.894862  2086.811968   7954.512878  24832.856620   9137.519860   \n",
       "1359   9138.548860  2161.242967   9584.448853  25093.193616   8504.684870   \n",
       "1360   8457.007871  1470.097978   7743.224882  24026.120633   8396.296872   \n",
       "1361   8085.881876  2228.470966   8710.141867  27222.194584   9346.749857   \n",
       "1362   9047.653862  1912.910971   8846.998865  22632.511654  10732.812836   \n",
       "\n",
       "              2030          2031        2034         2035              subject  \n",
       "0     14567.209777   8443.973871  875.678987  5572.034915  OAS2_0076_MR3_mpr-2  \n",
       "1     13275.128797   8768.108866  964.858985  5343.253918  OAS2_0060_MR2_mpr-2  \n",
       "2     13378.714795  10293.772843  855.784987  7072.316892  OAS2_0161_MR1_mpr-4  \n",
       "3     11928.853818   8468.669870  825.257987  4919.648925  OAS2_0079_MR1_mpr-4  \n",
       "4     10647.405837   6519.057900  699.033989  5074.341922  OAS2_0004_MR2_mpr-3  \n",
       "...            ...           ...         ...          ...                  ...  \n",
       "1358  14187.508783  10135.649845  976.177985  5900.285910  OAS2_0028_MR1_mpr-1  \n",
       "1359  14272.229782   7349.803888  789.928988  5300.378919  OAS2_0137_MR1_mpr-3  \n",
       "1360  11457.571825   8403.842871  797.131988  5437.921917  OAS2_0026_MR1_mpr-4  \n",
       "1361  13241.857798   7926.043879  807.078988  6228.536905  OAS2_0100_MR2_mpr-2  \n",
       "1362  11668.173822   8133.215876  550.171992  5645.779914  OAS2_0005_MR2_mpr-1  \n",
       "\n",
       "[1363 rows x 97 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "volume_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eda7b0e9-1ca2-450e-8fef-90f0074c7c17",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#volume_df_mpr1 = volume_df[volume_df['subject'].str.contains('MR1_mpr-1')]\n",
    "#volume_df_mpr2 = volume_df[volume_df['subject'].str.contains('MR1_mpr-2')]\n",
    "#volume_df_mpr3 = volume_df[volume_df['subject'].str.contains('MR1_mpr-3')]\n",
    "#volume_df_mpr4 = volume_df[volume_df['subject'].str.contains('MR1_mpr-4')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "90214d0d-1a1b-4480-88b7-64350c0669c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "volume_df_mpr1 = volume_df[volume_df['subject'].str.contains('MR1')]\n",
    "volume_df_mpr2 = volume_df[volume_df['subject'].str.contains('MR2')]\n",
    "volume_df_mpr3 = volume_df[volume_df['subject'].str.contains('MR3')]\n",
    "volume_df_mpr4 = volume_df[volume_df['subject'].str.contains('MR4')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "363e34f8-99c6-4cc8-a40e-85de62cf9562",
   "metadata": {},
   "outputs": [],
   "source": [
    "lut_path = '/mnt/drwelly1/Team_Planning/Brain_Volumetry/Algorithms/freesurfer/FreeSurferColorLUT.txt'\n",
    "# labeling 불러오면됨"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "218543bf-e95a-4542-82fc-7eae9dd84458",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_freesurfer_lut(lut_path):\n",
    "    lut = {}\n",
    "    with open(lut_path, 'r') as file:\n",
    "        for line in file:\n",
    "            if line.strip() and not line.startswith('#'):\n",
    "                parts = line.split()\n",
    "                if parts[0].isdigit():\n",
    "                    lut[int(parts[0])] = ' '.join(parts[1:])\n",
    "    return lut\n",
    "\n",
    "freesurfer_lut = load_freesurfer_lut(lut_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "93a9351c-a439-46b6-9031-08c3df93563d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 모든 컬럼 이름을 변경\n",
    "new_columns = [freesurfer_lut.get(int(col), 'Unknown') if col != 'subject' else 'subject' for col in volume_df_mpr1 .columns]\n",
    "\n",
    "\n",
    "volume_df_mpr1 .columns = new_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e0bbe9e8-5d04-492e-8d7b-d69bf88ae16a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def extract_number(subj):\n",
    "    parts = subj.split('_')  # '_'를 기준\n",
    "    if len(parts) > 1:\n",
    "        number_part = parts[1]  \n",
    "        # 숫자만 \n",
    "        numbers = ''.join(filter(str.isdigit, number_part))\n",
    "        return int(numbers) if numbers.isdigit() else None\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "0f13c45c-b958-42b7-867c-f8da54cbde62",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2802025/1083419085.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  volume_df_mpr1 ['sort_key'] = volume_df_mpr1['subject'].apply(extract_number)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "volume_df_mpr1 ['sort_key'] = volume_df_mpr1['subject'].apply(extract_number) \n",
    "volume_df_sorted1 = volume_df_mpr1 .sort_values(by='sort_key').drop(columns=['sort_key']) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "697481ed-be09-4ede-ac3b-48f7cfd10d61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 모든 컬럼 이름을 변경\n",
    "new_columns = [freesurfer_lut.get(int(col), 'Unknown') if col != 'subject' else 'subject' for col in volume_df_mpr2 .columns]\n",
    "\n",
    "\n",
    "volume_df_mpr2.columns = new_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "347a1fa4-0700-4a74-96cf-921cd2eab4ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 모든 컬럼 이름을 변경\n",
    "new_columns = [freesurfer_lut.get(int(col), 'Unknown') if col != 'subject' else 'subject' for col in volume_df_mpr3.columns]\n",
    "\n",
    "\n",
    "volume_df_mpr3.columns = new_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "4e9f7412-1e34-4324-ad20-318649f7db81",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2802025/593579216.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  volume_df_mpr3['sort_key'] = volume_df_mpr3['subject'].apply(extract_number)  # 정렬 키 생성\n"
     ]
    }
   ],
   "source": [
    "\n",
    "volume_df_mpr3['sort_key'] = volume_df_mpr3['subject'].apply(extract_number)  # 정렬 키 생성\n",
    "volume_df_sorted3 = volume_df_mpr3.sort_values(by='sort_key').drop(columns=['sort_key'])  # 정렬 및 정렬 키 컬럼 삭제\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2b3c828c-4ffd-4675-bcb9-b8dbabdec658",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 모든 컬럼 이름을 변경\n",
    "new_columns = [freesurfer_lut.get(int(col), 'Unknown') if col != 'subject' else 'subject' for col in volume_df_mpr4.columns]\n",
    "\n",
    "\n",
    "volume_df_mpr4.columns = new_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a48f85b0-a7ed-44b4-94c4-dbba3a5515f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_2802025/2856656302.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  volume_df_mpr4['sort_key'] = volume_df_mpr4['subject'].apply(extract_number)\n"
     ]
    }
   ],
   "source": [
    "volume_df_mpr4['sort_key'] = volume_df_mpr4['subject'].apply(extract_number) \n",
    "volume_df_sorted4 = volume_df_mpr4.sort_values(by='sort_key').drop(columns=['sort_key'])  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1b3cbd06-677c-4755-891a-fd512c65cc96",
   "metadata": {},
   "outputs": [],
   "source": [
    "def update_df_columns_keep_others(df, roi_dict):\n",
    "    # 합쳐진 컬럼들의 원본 컬럼 이름을 저장할 리스트\n",
    "    columns_to_remove = []\n",
    "    \n",
    "    # ROI 딕셔너리에 기반하여 합치는 작업을 수행\n",
    "    for roi, sub_columns in roi_dict.items():\n",
    "        # 해당 ROI에 속하는 데이터프레임의 컬럼들 찾기\n",
    "        relevant_columns = [col for col in df.columns if col.split(' ')[0] in sub_columns]\n",
    "        \n",
    "        # 해당 컬럼들이 데이터프레임에 있는 경우, 합쳐진 컬럼 생성\n",
    "        if relevant_columns:\n",
    "            # 합산 전에 NaN 값을 0으로 변환\n",
    "            df[roi] = df[relevant_columns].fillna(0).sum(axis=1)\n",
    "            # 원본 컬럼 이름을 제거 리스트에 추가\n",
    "            columns_to_remove.extend(relevant_columns)\n",
    "    \n",
    "    # 모든 ROI 컬럼들을 포함하는 리스트 생성\n",
    "    all_roi_columns = set()\n",
    "    for sub_columns in roi_dict.values():\n",
    "        all_roi_columns.update(sub_columns)\n",
    "    \n",
    "    # 제거할 컬럼 리스트에서, 딕셔너리에 정의된 컬럼만 실제로 제거\n",
    "    columns_to_remove = set([col for col in columns_to_remove if col.split(' ')[0] in all_roi_columns])\n",
    "    \n",
    "    # 실제로 제거할 컬럼들을 제거\n",
    "    df.drop(columns=columns_to_remove, inplace=True, errors='ignore')\n",
    "    \n",
    "    return df\n",
    "\n",
    "# 함수 실행하여 데이터프레임 업데이트\n",
    "new_df1 = update_df_columns_keep_others(volume_df_mpr1.copy(), combined_roi_dict)\n",
    "new_df2 = update_df_columns_keep_others(volume_df_mpr2.copy(), combined_roi_dict)\n",
    "new_df3 = update_df_columns_keep_others(volume_df_mpr3.copy(), combined_roi_dict)\n",
    "new_df4 = update_df_columns_keep_others(volume_df_mpr4.copy(), combined_roi_dict)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "cce60f8d-f90a-42ba-af7a-2af0c1d6d991",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "brain_areas = set()\n",
    "left_right_columns = []\n",
    "\n",
    "for col in new_df1.columns:\n",
    "    if col.startswith('Left-') or col.startswith('Right-'):\n",
    "        left_right_columns.append(col)\n",
    "        brain_area = col.split('-', 1)[1]\n",
    "        brain_areas.add(brain_area)\n",
    "\n",
    "\n",
    "for area in brain_areas:\n",
    "    left_col = f'Left-{area}'\n",
    "    right_col = f'Right-{area}'\n",
    "    new_df1[area] = new_df1.get(left_col, 0) + new_df1.get(right_col, 0)\n",
    "\n",
    "volume_df_sorted1_final = new_df1.drop(columns=[col for col in left_right_columns if col not in ['subject']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "3be90a3f-515b-400d-9fa9-3622173d46d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted1_final= volume_df_sorted1_final.drop(columns = ['sort_key','Unknown 0 0 0 0','choroid-plexus 0 200 200 0','choroid-plexus 0 200 221 0','WM-hypointensities 200 70 255 0']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e9cdc669-2045-42e4-8082-865a560fd7b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "brain_areas = set()\n",
    "left_right_columns = []\n",
    "\n",
    "for col in new_df2.columns:\n",
    "    if col.startswith('Left-') or col.startswith('Right-'):\n",
    "        left_right_columns.append(col)\n",
    "        brain_area = col.split('-', 1)[1]\n",
    "        brain_areas.add(brain_area)\n",
    "\n",
    "\n",
    "for area in brain_areas:\n",
    "    left_col = f'Left-{area}'\n",
    "    right_col = f'Right-{area}'\n",
    "    new_df2[area] = new_df2.get(left_col, 0) + new_df2.get(right_col, 0)\n",
    "\n",
    "volume_df_sorted2_final = new_df2.drop(columns=[col for col in left_right_columns if col not in ['subject']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "668125e4-9bb4-4e4e-b244-5daa2a0fc545",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted2_final= volume_df_sorted2_final.drop(columns = ['Unknown 0 0 0 0','choroid-plexus 0 200 200 0','choroid-plexus 0 200 221 0','WM-hypointensities 200 70 255 0']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "63fcb21f-b5d5-4165-882e-4cc718a60a4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "brain_areas = set()\n",
    "left_right_columns = []\n",
    "\n",
    "for col in new_df3.columns:\n",
    "    if col.startswith('Left-') or col.startswith('Right-'):\n",
    "        left_right_columns.append(col)\n",
    "        brain_area = col.split('-', 1)[1]\n",
    "        brain_areas.add(brain_area)\n",
    "\n",
    "\n",
    "for area in brain_areas:\n",
    "    left_col = f'Left-{area}'\n",
    "    right_col = f'Right-{area}'\n",
    "    new_df3[area] = new_df3.get(left_col, 0) + new_df3.get(right_col, 0)\n",
    "\n",
    "volume_df_sorted3_final = new_df3.drop(columns=[col for col in left_right_columns if col not in ['subject']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "6c64cb3b-8974-455e-ba05-54fc805b3e72",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted3_final= volume_df_sorted3_final.drop(columns = ['sort_key','Unknown 0 0 0 0','choroid-plexus 0 200 200 0','choroid-plexus 0 200 221 0','WM-hypointensities 200 70 255 0']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0360e5f9-c6a2-416a-bda7-de630fcb46d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "brain_areas = set()\n",
    "left_right_columns = []\n",
    "\n",
    "for col in new_df4.columns:\n",
    "    if col.startswith('Left-') or col.startswith('Right-'):\n",
    "        left_right_columns.append(col)\n",
    "        brain_area = col.split('-', 1)[1]\n",
    "        brain_areas.add(brain_area)\n",
    "\n",
    "\n",
    "for area in brain_areas:\n",
    "    left_col = f'Left-{area}'\n",
    "    right_col = f'Right-{area}'\n",
    "    new_df4[area] = new_df4.get(left_col, 0) + new_df4.get(right_col, 0)\n",
    "\n",
    "volume_df_sorted4_final = new_df4.drop(columns=[col for col in left_right_columns if col not in ['subject']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "df5b4025-0295-4a74-b128-c3b9913fa8ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted4_final= volume_df_sorted4_final.drop(columns = ['sort_key','Unknown 0 0 0 0','choroid-plexus 0 200 200 0','choroid-plexus 0 200 221 0','WM-hypointensities 200 70 255 0']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "fb595840-89cb-4e43-92df-9c1c242e94da",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted1_final.to_csv('Session1_oasis2_atropy_20240418_before_fastsurfer.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b02f83dc-1188-4d76-a2b2-530448b1cfea",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted2_final.to_csv('Session2_oasis2_atropy_20240418_before_fastsurfer.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "4bc8e5b4-4efa-4751-9518-1815d3ea60bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted3_final.to_csv('Session3_oasis2_atropy_20240418_before_fastsurfer.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "75015ff3-b071-4647-bdda-22f0ed93e233",
   "metadata": {},
   "outputs": [],
   "source": [
    "volume_df_sorted4_final.to_csv('Session4_oasis2_atropy_20240418_before_fastsurfer.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "a26dcf09-9e81-4bc7-8f9d-012c214c04b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/limseoyoung/debug'"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18ae2bd8-595e-45ed-b234-08c1e7185f8f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
